#!/bin/bash
# This override encrypt the server password using base64.
# This will enable user to use char such as { } , [ ] ( ) in password.
# Use 'plaintobase64' and 'base64toplain' to convert between base64 and plain text.

_debug_tag=" by base64 encrypter"
CONVERTED_TO_BASE64english="Converted to base64."
CONVERTED_TO_PLAINenglish="Converted to plain format. If there are illigal chars in password, shadowmanager might not work correctly."
CONVERTED_TO_BASE64chinese="已转换到base64。"
CONVERTED_TO_PLAINchinese="已转换到纯文本格式。如果密码中包含非法字符，shadowmanager 可能不能正常工作。"

echo "	plaintobase64: convert shadowmanager configure file from plain format to base64." | add-help
echo "	base64toplain: convert shadowmanager configure file from base64 format to plain." | add-help
echo "	plaintobase64: 将 shadowmanager 的配置文件从纯文本转换到 base64 格式。" | add-help chinese
echo "	base64toplain: 将 shadowmanager 的配置文件从 base64 转换到纯文本格式。" | add-help chinese

debug "overrided genconf,$_debug_tag"

function genconf {
	hook pre-genconf
	rm -f $SHADOW_JSON_DIR/* 2> /dev/null
	[[ ! -e $SHADOW_JSON_DIR ]] && mkdir $SHADOW_JSON_DIR
	echo -n "$GEN_SS_CONF"
	for method in $METHODS
	do
		{
			[[ ! -z $(cat $SHADOW_CONF|grep \($method\)) ]] && {
				servers=$(cat $SHADOW_CONF|grep \($method\)|sed '$ d')
				_last=$(cat $SHADOW_CONF|grep \($method\)|tail -n1)
				echo $SHADOWSOCKS_JSON_PRE > $SHADOW_JSON_DIR$method.conf.tmp
				for server in $servers
				do
					_port=$(echo $server|awk -F "[{},]" '{print $2}')
					_pass=$(echo $server|awk -F "[{},]" '{print $3}'|base64 --decode)
					echo "\"$_port\": \"$_pass\"," >> $SHADOW_JSON_DIR$method.conf.tmp
				done
				_port=$(echo $_last|awk -F "[{},]" '{print $2}')
				_pass=$(echo $_last|awk -F "[{},]" '{print $3}'|base64 --decode)
				echo "\"$_port\": \"$_pass\"" >> $SHADOW_JSON_DIR$method.conf.tmp
				echo $SHADOWSOCKS_JSON_EXT >> $SHADOW_JSON_DIR$method.conf.tmp
				cat $SHADOW_JSON_DIR$method.conf.tmp|sed -e "s/__FAST_OPEN__/$TCP_FAST_OPEN/; s/__METHOD__/$method/;" > $SHADOW_JSON_DIR$method.conf
				rm $SHADOW_JSON_DIR$method.conf.tmp
			}
		} &
	done
	wait
	echo $DONE
	hook post-genconf
}

debug "overrided add,$_debug_tag"

function add {
  _pass=$(echo $2 | base64)
	[[ -z $3 ]] && echo "add: $MISSING_ARGS" && return 1
	[[ $(verify $1 $3) == "false" ]] && echo "$CONTAIN_INVALID_CHARS" && return 1
	[[ -e $SHADOW_CONF && ! -z $(cat $SHADOW_CONF | grep {$1, | awk -F{ '{print $2}' | awk -F, '{print $1}') ]] && echo "$PORT_ALREADY_IN_USE" && return 1
	[[ -z $(echo $METHODS | grep \ $3\ ) ]] && echo $(echo "$ERR_METHOD_NOT_EXIST"|sed -e "s/__METHOD__/$3/") && return 1
	hook pre-add
	echo "($3){$1,$_pass}" >> $SHADOW_CONF
	echo $SERVER_ADDED
	hook post-add
}

debug "overrided show,$_debug_tag"

function show {
	id=0
	[[ ! -z $1 ]] && _servers=$SHADOW_CONF.tmp || _servers=$SHADOW_CONF
	echo "ID	(method){port,password}"
	for _server in $(cat $_servers)
	do
		let id++
    _method=$(echo $_server|awk -F "[()]" '{print $2}')
    _port=$(echo $_server|awk -F "[{},]" '{print $2}')
    _pass=$(echo $_server|awk -F "[{},]" '{print $3}'|base64 --decode)
		echo "$id	($_method){$_port,$_pass}"
	done
}

debug "added base64toplain,$_debug_tag"

function base64toplain {
	_servers=$SHADOW_CONF
	[[ -e $SHADOW_CONF.tmp ]] && rm $SHADOW_CONF.tmp
	for _server in $(cat $_servers)
	do
		_method=$(echo $_server|awk -F "[()]" '{print $2}')
		_port=$(echo $_server|awk -F "[{},]" '{print $2}')
		_pass=$(echo $_server|awk -F "[{},]" '{print $3}'|base64 --decode)
		echo "$id	($_method){$_port,$_pass}" >> $SHADOW_CONF.tmp
	done
	mv $SHADOW_CONF.tmp $SHADOW_CONF
	eval echo \$CONVERTED_TO_PLAIN$LANGUAGE
}

debug "added plaintobase64,$_debug_tag"

function plaintobase64 {
	_servers=$SHADOW_CONF
	[[ -e $SHADOW_CONF.tmp ]] && rm $SHADOW_CONF.tmp
	for _server in $(cat $_servers)
	do
		_method=$(echo $_server|awk -F "[()]" '{print $2}')
		_port=$(echo $_server|awk -F "[{},]" '{print $2}')
		_pass=$(echo $_server|awk -F "[{},]" '{print $3}'|base64)
		echo "$id	($_method){$_port,$_pass}" >> $SHADOW_CONF.tmp
	done
	mv $SHADOW_CONF.tmp $SHADOW_CONF
	eval echo \$CONVERTED_TO_BASE64$LANGUAGE
}
