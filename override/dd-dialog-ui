#!/bin/bash

echo "	gui: open shadowmanager GUI" | add-help
echo "  gui: 开启 shadowmanager GUI" | add-help chinese

default_METHODS="\
 table\
 rc4-md5\
 salsa20\
 chacha20\
 aes-256-cfb\
 aes-192-cfb\
 aes-128-cfb\
 bf-cfb\
 cast5-cfb\
 des-cfb\
 rc2-cfb\
 rc4\
 seed-cfb"

function newconf {
	local nconf_TMP=$(mktemp)
	local _metarg=""
	local i=1
	for _met in $default_METHODS
	do
		local onoff=off
		[[ ! -z $(echo $METHODS | grep " $_met ") ]] && onoff=on
		_metarg="$_metarg $_met $_met $onoff "
		let i++
	done

	dialog									      \
		--keep-window							      \
		--title "Shadowmanager Configuration" --ok-label "Submit"             \
		--backtitle "Shadowmanager Configuration"                             \
		--mixedform "Here, you can change how Shadowmanager act."  18 75  0   \
		"Language             :" 1  1	"$LANGUAGE" 		1  24 100 0 0 \
		"Check root           :" 2  1	"$CHECK_ROOT"  		2  24 100 0 0 \
		"Shadowsocks Json DIR :" 3  1	"$SHADOW_JSON_DIR"  	3  24 100 0 0 \
		"Shadowmanager PIDs   :" 4  1	"$PIDS" 		4  24 100 0 0 \
		"Shadowsocks PID      :" 5  1 	"$SS_PID"		5  24 100 0 0 \
		"Shadowservers conf   :" 6  1	"$SHADOW_CONF"		6  24 100 0 0 \
		"Log DIR              :" 7  1	"$LOGDIR"		7  24 100 0 0 \
		"Bind address         :" 8  1	"$SERVER_ADDR"		8  24 100 0 0 \
		"Timeout              :" 9  1	"$TIMEOUT"		9  24 100 0 0 \
		"Shadowsocks command  :" 10 1	"$SHADOW_CMD"		10 24 100 0 0 \
		"TCP Fast Open        :" 11 1	"$TCP_FAST_OPEN"	11 24 100 0 0 \
		--and-widget --keep-window --checklist "Select encryption(s) to use:" \
									      0   0 0 \
		$_metarg							      \
		2> $nconf_TMP

		[[ ! $? == 0 ]] && return 1

		dialog --yesno "This will override your current configuration. Continue?" 0 0

		[[ ! $? == 0 ]] && return 1

		cat > ./conf/shadowmanager.conf << CONF
# auto generated by guiconf
LANGUAGE="$(cat $nconf_TMP | sed -n 1p)"
CHECK_ROOT="$(cat $nconf_TMP | sed -n 2p)"
SHADOW_JSON_DIR="$(cat $nconf_TMP | sed -n 3p)"
PIDS="$(cat $nconf_TMP | sed -n 4p)"
SS_PID="$(cat $nconf_TMP | sed -n 5p)"
SHADOW_CONF="$(cat $nconf_TMP | sed -n 6p)"
LOGDIR="$(cat $nconf_TMP | sed -n 7p)"
SERVER_ADDR="$(cat $nconf_TMP | sed -n 8p)"
TIMEOUT="$(cat $nconf_TMP | sed -n 9p)"
SHADOW_CMD="$(cat $nconf_TMP | sed -n 10p)"
TCP_FAST_OPEN="$(cat $nconf_TMP | sed -n 11p)"
METHODS="$(cat $nconf_TMP | sed -n 12p)"
CONF

		dialog --msgbox "Operation completed. You might need to restart shadowmanager." 0 0

		. ./conf/shadowmanager.conf

}

function gui {
	while true
	do
		_gui
	done
}

function cfm_restart {
	dialog --yesno "Restart shadowmanager?" 0 0
	[[ $? == 0 ]] && {
		restart 
		read -p "Press [ENTER] key to continue..."
	}
}

function _gui {

	local TEMP=$(mktemp)

	dialog --menu "shadowmanager-gui" 0 50 0 \
		a "(A)dd a server" \
		c "server (C)ontrol" \
		o "(O)verride manager" \
		r "(R)emove a server" \
		s "(S)how servers" \
		f "Shadowmanager con(F)iguration" \
		e "(E)xecute shadowmanager command" \
		p "(P)lugins menu" \
		q "(Q)uit shadowmanager" 2> $TEMP
	[[ ! $? == 0 ]] && echo q > $TEMP

	case $(cat $TEMP) in
		a) {
			local _serveradd_TEMP=$(mktemp)
			let i=1;
			local _enc=""
			for _method in $METHODS
			do
				echo $_method >> $_serveradd_TEMP
				local _enc="$_enc $i $_method"
				let i++
			done

			dialog \
					--keep-window --begin 2 2 --inputbox "Port to listen on: " 0 0 \
			--and-widget	--keep-window --begin 4 4 --inputbox "Password: " 0 0 \
			--and-widget    --keep-window --begin 6 6 --menu "Encryption:" 0 40 0 $_enc \
			2> $_serveradd_TEMP.selection

			[[ ! $? == 0 ]] && rm $_serveradd_TEMP* && return 1

			port=$(cat $_serveradd_TEMP.selection | awk -F'\t' '{print $1}')
			pass=$(cat $_serveradd_TEMP.selection | awk -F'\t' '{print $2}')
			method_id=$(cat $_serveradd_TEMP.selection | awk -F'\t' '{print $3}')
			method=$(cat $_serveradd_TEMP | sed -n "${method_id}p")

			debug "called add $port $pass $method"
			dialog --msgbox "$(add $port $pass $method)" 0 0

			cfm_restart

			rm $_serveradd_TEMP*
			return 0
		};;
		c) {
			local _serverctrl_TEMP=$(mktemp)

			dialog \
					--menu "Shadowmanager control:" 0 40 0 \
						s "(S)top shadowmanager" \
						t "s(T)art shadowmanager" \
						r "(R)estart shadowmanager" \
						u "Shadowmanager (S)tatus" \
						b "(B)ack" \
			2> $_serverctrl_TEMP
			[[ ! $? == 0 ]] && b > $_serverctrl_TEMP

			case $(cat $_serverctrl_TEMP) in
				s) {
					stop
					read -p "Press [ENTER] key to continue..."
				};;
				t) {
					start
					read -p "Press [ENTER] key to continue..."
				};;
				r) {
					restart
					read -p "Press [ENTER] key to continue..."
				};;
				u) {
					dialog --msgbox "$(status)" 0 0
				};;
				b) true ;;
			esac
			
			rm $_serverctrl_TEMP
			return 0
		};;
		r) {
			local _serveredit_TEMP="$(mktemp)"

			show | sed -e "1d" > $_serveredit_TEMP.list

			dialog \
					--menu "Select server: " 0 70 0 $(cat $_serveredit_TEMP.list) \
			2> $_serveredit_TEMP

			[[ ! $? == 0 ]] && rm $_serveredit_TEMP* && return 1
			
			remove $(cat $_serveredit_TEMP)
			rm $_serveredit_TEMP*
		};;
		o) {
			local _ovr_TEMP="$(mktemp)"
			
			let i=1

			local ovrarg=""

			for ovr in $(ls ./override-available/)
			do
				local onoff=off
				[[ -e ./override/$ovr ]] && local onoff=on
				local ovrarg="$ovrarg $i $ovr $onoff"
				let i++
			done

			dialog \
					--checklist "Select override(s) to use:" 0 0 0 $ovrarg \
			2> $_ovr_TEMP.selection

			[[ -z $(cat $_ovr_TEMP.selection) ]] && rm $_ovr_TEMP && return 0

			local ovr_target=$(ls ./override-available/|sed -n "$(cat $_ovr_TEMP.selection|sed -e 's/ /p; /g')p;")

			rm ./override/*

			enovr $ovr_target

			dialog --msgbox "Enabled override(s):\n$ovr_target\n\nYou will need to restart shadowmanager." 0 0

			rm $_ovr_TEMP*
			return 0

		};;
		s) {
			dialog --msgbox "$(show)" 0 0
		};;
		f) newconf;;
		p) {
			local _pluginui_temp=$(mktemp)
			local pluginarg=""
			IFS=$'\n'
			for plugin in $(cat $PLUGIN_UI_CFG)
			do
				thisname=$(echo $plugin | awk -F":" '{print $1}')
				thisfunc=$(echo $plugin | awk -F":" '{print $2}')
				pluginarg="$pluginarg $thisfunc $thisname "
			done
			
			[[ -z $pluginarg ]] && dialog --msgbox "No extra GUIs found." 5 30 

			IFS=" "

			dialog --menu "GUI Provided by overrides:" 0 75 0 $pluginarg 2> $_pluginui_temp
			$(cat $_pluginui_temp)
		};;
		e) {
			local _cmd_temp=$(mktemp)
			dialog --inputbox "Command:" 0 0 2> $_cmd_temp
			eval $(cat $_cmd_temp)
			read -p "Press [ENTER] key to continue..."
		};;
		q) {
			rm $TEMP
			exit 0
		};;
	esac
}
